<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Copyright (c) Members of the EGEE Collaboration. 2004 
	See http://eu-egee.org/partners/ for details on the copyright holders
	For license conditions see the license file or http://eu-egee.org/license.html

	Build file for the GLite Middleware Job Provenance Subsystem
	
	Authors: Ales Krenek <ljocha@ics.muni.cz>
	Version info: $Id$
	Release: $Name$

	Revision history:
	$Log$
	Revision 1.12  2006/05/05 11:52:37  jpospi
	conditional disabling of cross-subsystem builds via "jponly" property

	Revision 1.11  2006/01/16 17:20:25  mmulac
	merge from RC15 branch
	 - compiles
	
	Revision 1.10.2.1  2005/10/20 06:55:15  zsalvet
	Add libtar and mysql external dependencies.
	
	Revision 1.10  2005/10/14 17:23:07  akrenek
	added jp.client
	
	Revision 1.9  2005/10/11 20:37:50  akrenek
	added dependencies on lb.server-bones and security.gsoap-plugin
	
	Revision 1.8  2005/10/10 11:07:09  valtri
	Make autobuilds happy.
	
	Revision 1.7  2005/09/22 16:49:46  valtri
	More places with dependencies.
	
	Revision 1.6  2005/09/22 10:47:58  valtri
	jp.server-common dependency to build.xml too
	
	Revision 1.5  2005/05/26 15:13:22  zurek
	inserted module.build.file
	
	Revision 1.4  2004/12/17 20:26:46  dimeglio
	Removed index
	
	Revision 1.3  2004/12/10 09:46:41  akrenek
	included ws-interface
	
	Revision 1.2  2004/12/01 18:36:00  zsalvet
	Add component targets.
	
	Revision 1.1  2004/11/22 13:21:49  dimeglio
	First version of this file
	
-->

<project name="jp" default="dist">

	<description>
		Ant build file to build the GLite Job Provenance Subsystem
	</description>
		
	<!-- =========================================
		 Builds the GLite JP subsystem
	     ========================================= -->

	<!-- Import baseline & user properties -->
	<import file="../org.glite/project/baseline.properties.xml" />

	<!-- Import subsystem build properties, 
	                      subsystem properties & 
	                      subsystem common properties -->
	<import file="./project/properties.xml" />

	<!-- Import global build properties and global properties -->
	<import file="${global.properties.file}" />
				
	<!-- =========================================
		 Load dependencies properties files (order is important) 
	     ========================================= -->
	<property file="${user.dependencies.file}"/>
	<property file="${subsystem.dependencies.file}"/>
	<property file="${global.dependencies.file}"/>	

	<!-- =========================================
                 Load configure options
             ========================================= -->
        <import file="${global.configure.options.file}"/>
			
	<!-- =========================================
		 Import global task definitions
	     ========================================= -->
	<import file="${global.taskdefs.file}" />
	
	<!-- =========================================
	     Import global compiler definitions
  	     ========================================= -->
	<import file="${global.compilerdefs.file}" />
		
	<!-- =========================================
		 Import targets 
	     ========================================= -->
	<import file="${global.targets-common.file}"/>
	
	<!-- =========================================
		 Load version file 
	     ========================================= -->
	<property file="${module.version.file}"/>
	<property file="${module.build.file}"/>
			
	<!-- ===============================================
		  Public common targets
	     =============================================== -->

	<target name="localinit" depends="envcheck">

		<echo> Preparing directories ... </echo>
		
		<mkdir dir="${stage.bin.dir}" />
		<mkdir dir="${stage.lib.dir}" />
		<mkdir dir="${stage.java.dir}" />
		<mkdir dir="${stage.inc.dir}" />
		<mkdir dir="${stage.int.dir}" />

		<mkdir dir="${dist.dir}" />

	</target>

	<target name="init" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="init"/>
		</antcall>
	</target>

	<target name="checkstyle" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="checkstyle"/>
		</antcall>
	</target>

	<target name="compile" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compile"/>
		</antcall>
	</target>

	<target name="compiletest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compiletest"/>
		</antcall>
	</target>

	<target name="unittest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unittest"/>
		</antcall>
	</target>

	<target name="unitcoverage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unitcoverage"/>
		</antcall>
	</target>

	<target name="stage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="stage"/>
		</antcall>
	</target>

	<target name="dist" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="dist"/>
		</antcall>
	</target>

	<target name="install" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="install"/>
		</antcall>
	</target>

	<target name="doc" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="doc"/>
		</antcall>
	</target>

	<target name="all" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="all"/>
		</antcall>
	</target>

	<target name="clean" depends="envcheck">

		<property name="offline.repository" value="true" />
		<antcall target="buildmodules">
			<param name="target" value="clean"/>
		</antcall>

		<delete dir="${module.bin.dir}" />
		<delete dir="${module.lib.dir}" />
		<delete dir="${module.autosrc.dir}" />
		<delete dir="${module.autodoc.dir}" />
		<delete dir="${module.test.reports.dir}" />

	</target>

	<target name="cleanAll" depends="clean"/>

	<!-- ===============================================
		 Private targets
	     =============================================== -->

	<!-- ===============================================
		 Modules proxy targets
	     =============================================== -->

	<!-- component targets definitions tag = do not remove = -->

	<target name="security.gsoap-plugin" unless="jponly" depends="envset">
		<if>
			<isset property="small.memory"/>
			<then>
				<exec dir="${security.subsystem.dir}" executable="${antExec}" failonerror="${failonerror}">
					<arg line="gsoap-plugin -Dtarget=${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${security.subsystem.dir}"
        				target="gsoap-plugin"
        				inheritall="false" >
        				<property name="target" value="${target}"/>
				</ant>
			</else>
		</if>
 	</target>

	<target name="lb.server-bones" unless="jponly" depends="envset">
		<if>
			<isset property="small.memory"/>
			<then>
				<exec dir="${lb.subsystem.dir}" executable="${antExec}" failonerror="${failonerror}">
					<arg line="server-bones -Dtarget=${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}"
        				target="server-bones"
        				inheritall="false" >
        				<property name="target" value="${target}"/>
				</ant>
			</else>
		</if>
 	</target>

	<if>
		<isset property="setenvonly"/>
	<then>
		<property name="jponly" value="yes"/>
		</then>           
	</if>                   

	<target name="lb.common" unless="setenvonly" depends="envset">
		<if>
			<isset property="small.memory"/>
			<then>
				<exec dir="${lb.subsystem.dir}" executable="${antExec}" failonerror="${failonerror}">
					<arg line="common -Dtarget=${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}"
        				target="common"
        				inheritall="false" >
        				<property name="target" value="${target}"/>
				</ant>
			</else>
		</if>
 	</target>

	<target name="lb.client-interface" unless="setenvonly" depends="envset">
		<if>
			<isset property="small.memory"/>
			<then>
				<exec dir="${lb.subsystem.dir}" executable="${antExec}" failonerror="${failonerror}">
					<arg line="client-interface -Dtarget=${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}"
        				target="client-interface"
        				inheritall="false" >
        				<property name="target" value="${target}"/>
				</ant>
			</else>
		</if>
 	</target>

	<target name="ws-interface" unless="setenvonly" depends="envset" >
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${jp.subsystem.dir}.ws-interface" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${jp.subsystem.dir}.ws-interface"
					target="${target}"
					inheritall="false" />
			</else>
		</if>
	</target>

	<target name="common" unless="setenvonly" depends="envset,lb.client-interface" >
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${jp.subsystem.dir}.common" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${jp.subsystem.dir}.common"
					target="${target}"
					inheritall="false" />
			</else>
		</if>
	</target>

	<target name="index" unless="setenvonly" depends="envset, common, server-common,security.gsoap-plugin,lb.server-bones" >
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${jp.subsystem.dir}.index" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${jp.subsystem.dir}.index"
					target="${target}"
					inheritall="false" />
			</else>
		</if>
	</target>

	<target name="primary" unless="setenvonly" depends="envset, ws-interface, common, server-common,security.gsoap-plugin,lb.server-bones" >
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${jp.subsystem.dir}.primary" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${jp.subsystem.dir}.primary"
					target="${target}"
					inheritall="false" />
			</else>
		</if>
	</target>

	<target name="server-common" unless="setenvonly" depends="envset, mysql, common,lb.common" >
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${jp.subsystem.dir}.server-common" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${jp.subsystem.dir}.server-common"
					target="${target}"
					inheritall="false" />
			</else>
		</if>
	</target>

	<target name="client" unless="setenvonly" depends="envset, libtar, common" >
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${jp.subsystem.dir}.client" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${jp.subsystem.dir}.client"
					target="${target}"
					inheritall="false" />
			</else>
		</if>
	</target>

	<!-- Main proxy -->
	<target name="buildmodules" depends="envset,
						ws-interface,
						common,
						primary,
						server-common,
						client,
						index">
		<echo append="true" file="${global.project.dir}/cruisecontrol-stub.xml">
	&lt;project name="${subsystem.name}" type="post-subsystem" packageName="${global.prefix}-${subsystem.prefix}"/&gt;
		</echo>
	</target>

</project>
