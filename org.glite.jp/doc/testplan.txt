1. JPPS standalone

1.1 job registration
1.1.1 basic functionality
- call RegisterJob 
* call GetJobAttributes owner to verify

1.1.2 AuthZ check
* call GetJobAttributes with different credentials - should fail

1.2 tag recording
- call RecordTag
* call GetJobAttributes to verify
- record and retrieve more values of the same tag

1.3 file upload

1.3.1 basic functionality
- call StartUpload, LB dump file type
* check with GetJobFiles -- shoud return nothing
- upload via ftp 
- call CommitUpload
* check with GetJobFiles -- should return URL
- retrieve and check the file

1.3.2 AuthZ checks 
(should fail)
* call GetJobFiles with different credentials

* StartUpload with different credentials

- StartUpload
* ftp upload with different credentials 

* ftp GET with different credentials

1.3.3 cleanup
(not implemented yet)
- call StartUpload, short timeout
- upload via ftp
(don't call CommitUpload)
* uploaded file should be purged after timeout

2. LB plugin 
TODO


3. JPPS-JPIS interaction (feeds)


set of queries (how many?) with different "triggering conditions":
- on job registration
- on LB file upload
- on RecordTag

corresponding sets of jobs to each query, each containing jobs which match
and which don't 

- initial IS release -- single query, so just one set of jobs
- due to 3.2 no point in pre-loading PS database, use 1.3.1 

3.1 single batch feed
- upload jobs to PS
- start feed
* check IS contents (jobs and expected attr values)

1) Start JP primary server
2) Register job to PS
	jpps_store_test -o CERT_DN -t "my_tag=car" -s https://localhost:8901

  You should see something like:
	** ./jpps-test -s https://localhost:8901 RegisterJob
	https://nonexistent.test.server/jpps_store_test_7199 
		/O=CESNET/O=Masaryk University/CN=Milos Mulac
	OK
	** ./jpps-test -s https://localhost:8901 GetJobAttr
	https://nonexistent.test.server/jpps_store_test_7199 
		http://egee.cesnet.cz/en/Schema/JP/System:owner
	OK
	Attribute values: /O=CESNET/O=Masaryk University/CN=Milos Mulac  
		SYSTEM  Thu Feb 16 14:40:02 2006
	....
	Attribute values:
		car     FILE    Thu Feb 16 14:40:02 2006

3) Start JP index server, using history query
	./glite-jp-indexd -s https://localhost:8901 -d -n -q hist

4) Check content of IS database
	mysql -u jpis -e "select * from jobs;" jpis1

  You should get some result, similar to:
	+----------------------------------+------------------------------------------------------+----------------------------------+-------+------------------------+
| jobid                            | dg_jobid
| ownerid                          | aclid | ps                     |
+----------------------------------+------------------------------------------------------+----------------------------------+-------+------------------------+
| 92eb48c03929587f793e97f895ac958b | https://nonexistent.test.server/jpps_store_test_1273 | 5864429d57da18e4ecf9ea366c6b2c9c | NULL  | https://localhost:8950 |
+----------------------------------+------------------------------------------------------+----------------------------------+-------+------------------------+	



3.2 single incremental feed
- register feed
- upload jobs to PS one by one
* check IS contents (matching jobs should turn up, others not)

1) Start JP primary server
2) Start JP index server, using continuous query
	./glite-jp-indexd -s https://localhost:8901 -d -n -q cont

3) Register job to PS
	the same as in 3.1/2

4) Check output of IS
	you should see incomming connection logs, and among them 
	severl times something like:

	INSERT INTO attr_52942b8c70bab8491ab5d3b9713d79f5 (jobid, value,
					full_value, origin) VALUES (
        '6f4866f3e4f8204c269449e6924d73c0',
        'S:/O=CESNET/O=Masaryk University/CN=Milos Mulac',
        'S:/O=CESNET/O=Masaryk University/CN=Milos Mulac',
        '1')
	....

5) Check content of IS database
	you can look whether the insert from previous step was successful:

	mysql -u jpis -e "select * from attr_52942b8c70bab8491ab5d3b9713d79f5;" jpis1

	should return:
	+----------------------------------+-------------------------------------------------+-------------------------------------------------+--------+
| jobid                            | value
| full_value                                      | origin |
+----------------------------------+-------------------------------------------------+-------------------------------------------------+--------+
| 76698aabbf5d60dfa5b42c279e1f0e8c | S:/O=CESNET/O=Masaryk University/CN=Milos
Mulac | S:/O=CESNET/O=Masaryk University/CN=Milos Mulac |      1 |
+----------------------------------+-------------------------------------------------+-------------------------------------------------+--------+
	



3.3 multiple feeds at time
TODO

3.4 advanced feed features (to be implemented)
- remove (not implemented in PS yet)
- splitted info about one job (check that the PS doesn't duplicate
  attribute values) - probably covered in 3.2


3.x PS-IS AuthZ
TODO, if any


4. IS queries
TBD: insert job sets via JP-IS interaction or directly?
	- better to populate database directly, independent on previous chain

All basic tests:
- clear IS database
- insert prepared job set
- ask queries and check answers
- clear database

TBD: Is one job set enough?
	- better to have one complete set

4.1 simple query
- using CLI

4.2 extended query
- using CLI

4.3 check "origin" behaviour (not implemented yet)
- queries with origin tag 

4.4 AuthZ checks
- non owner queries should fail
- to be implemented: ACLs and its evaluation

4.x IS CLI
- standalone tests?	- not now
  - prepared config files and command line parameters
  - check expected QueryJobs contents

5. IS standalone (to be implemented)

5.1 server startup

5.1.1 reboot persistency / configuration vs. database content
    situations handling
- prepared config files
- checking behaviour (how?) after reboot with different config file

5.1.2 registration of PS feeds
! already covered by 3
- prepared config files
- checking appropriate FeedIndex calls

5.2 admin interface
TODO

5.3 type plugin
TODO


6. Deployment
