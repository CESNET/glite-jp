Job provenance Index server README
==================================

($Header$)

Job provenance and its components 
---------------------------------

This file contains basic administrator's documentation for Job
provenance (JP) Index server (IS). For Job provenance architecture and
functionality description please see: EGEE architecture document
DJRA1.4 - https://edms.cern.ch/document/594698/ chapter 8.4.
Job provenance interfaces are documented on http://egee.cesnet.cz/en/WSDL/ 
page.

Source code, executables, dependences
-------------------------------------

JP-IS CVS module name is org.glite.jp.index. It depends on common JP libraries
(module org.glite.jp.common, org.glite.jp.server-common) and implements 
interfaces defined in org.glite.jp.ws-interface. It is also based on 
org.glite.lb.server-bones.

JP-IS consist from one stand-alone daemon (glite-jp-indexd) which is
using MySQL database. Default db name is jpis, all access is granted to
user jpis.

JP-IS interactions:

- JP primary storage - feedings data from primary storage to the IS according
  to particular IS instance administrator needs (expressed by IS configuration)

- IS user query interface - implements IS service for end users

- admin interface - intended for admin tools (management and
  on-the-fly configuration changes)


Release notes 
------------- 

- In this release configuration of JP-IS is rather limited. Parts of
  configuration are hard-coded (src/conf.c)

- Debug outputs are on and directed to /opt/glite/var/log/glite-jp-index.log
  file.

- No admin tools are implemented yet.


Installation
------------

- database setup

  The JP-IS server daemon assume prior creation of its database. Simple tool
  for database creation is org.glite.jp.index/config/dbsetup.sh

- customize startup script /etc/init.d/glite-jp-indexd (see below)
  and set up service startup using this script


Configuration
------------- 

Currently, configuration is done by command line options,  and 
some hard-coded options.


The index server takes the following options:

./glite-jp-indexd [option]
        -d, --debug      don't run as daemon, additional diagnostics
	-q, --query-type hist/cont/both (default history)	
        -n, --noauth     don't check user identity with result owner
        -m, --mysql      database connect string
        -p, --port       port to listen
        -i, --pidfile    file to store master pid
        -o, --logfile    file to store logs
	-x, --config     file with server configuration

The config file parameter is required. There is the example configuration in
$GLITE_LOCATION/etc/glite-jpis-config.xml.


Starting the daemon
-------------------

Preferred way of starting the daemon is using start-up script
(config/startup). It loads glite.conf file (personal version may be stored
in ~/.glite.conf) where many variables may be set to configure the daemon.
The script takes following variables:

GLITE_JPIS_CONFIG	- server config file specification
			(default is $GLITE_LOCATION//etc/glite-jpis-config.xml)
GLITE_JPIS_DEBUG   	- setting to '-d' forces the daemon not to daemonize 
GLITE_JPIS_QT		- defines query type 
			'hist' ... history query
			'cont' ... continuous query
			'both' ... combination of previous types
GLITE_JPIS_AUTH		- setting to '-n' forces the daemon not to check
			authorisation
GLITE_JPIS_PORT 	- used port (default 8902)
GLITE_JPIS_DB		- database connection string 
			(default jpis/@localhost:jpis)
GLITE_JPIS_LOGFILE 	- log file 
			(default is $GLITE_LOCATION_VAR/log/glite-jp-indexd.log)
GLITE_JPIS_PIDFILE 	- pid file 
			(default is $GLITE_LOCATION_VAR/run/glite-jp-indexd.log)


Testing 
-------

For testing recipes of JP-IS please see appropriate chapter of JP test plan
document (org.glite.jp/doc/testplan.tex).
