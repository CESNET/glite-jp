Job provenance Index server README
==================================

($Header$)

Job provenance and its components 
---------------------------------

This file contains basic administrator's documentation for Job
provenance (JP) Index server (IS). For Job provenance architecture and
functionality description please see: EGEE architecture document
DJRA1.4 - https://edms.cern.ch/document/594698/ chapter 8.4.
Job provenance interfaces are documented on http://egee.cesnet.cz/en/WSDL/ 
page.

Source code, executables, dependences
-------------------------------------

JP-IS CVS module name is org.glite.jp.index. It depends on common JP libraries
(module org.glite.jp.common, org.glite.jp.server-common) and implements 
interfaces defined in org.glite.jp.ws-interface. It is also based on 
org.glite.lb.server-bones.

JP-IS consist from one stand-alone daemon (glite-jp-indexd) which is
using MySQL database. Default db name is jpis1, all access is granted to
user jpis.

JP-IS interactions:

- JP primary storage - feedins data from primary storage to the IS according
  to particular IS instance administrator needs (expressed by IS configuration)

- IS user query interface - implements IS service for end users

- admin interface - intended for admin tools (management and
  on-the-fly configuration changes)


Release notes 
------------- 

- In this release configuration of JP-IS is rather limited. Parts of
  configuration are hard-coded (src/conf.c)

- Debug outputs are on and directed to /opt/glite/var/log/glite-jp-index.log
  file.

- No admin tools are implemented yet.


Installation
------------

- database setup

  The JP-IS server daemon assume prior creation of its database. Simple tool
  for database creation is org.glite.jp.index/config/dbsetup.sh

- customize startup script /etc/init.d/glite-jp-indexd (see below)
  and set up service startup using this script


Configuration
------------- 

Currently, configuration is done by a combination of command line options, 
environment variables (majority of which are substitutional) and 
hard-coded options.


The index server takes the following options:

./glite-jp-indexd [option]
        -d, --debug      don't run as daemon, additional diagnostics
        -n, --noauth     don't check user identity with result owner
        -m, --mysql      database connect string
        -p, --port       port to listen
        -i, --pidfile    file to store master pid
        -o, --logfile    file to store logs


which can be substituted (if both set, command line option has priority)
with env. variables:

GLITE_JPIS_DEBUG   	- if set to "0" don't daemonize (default - deamonize)
GLITE_JPIS_PORT 	- used port (default 8902)
GLITE_JPIS_DB		- database connection string 
			(default jpis/@localhost:jpis1)
GLITE_JPIS_LOGFILE 	- log file (default for root /var/log/glite-jp-indexd.log
			non-root user ~/glite-jp-indexd.log)
GLITE_JPIS_PIDFILE 	- pid file (default for root /var/run/glite-jp-indexd.log
			non-root user ~/glite-jp-indexd.pid)


Parameter which is now configurable only through env. variable is:

GLITE_JPIS_PS   - location of JP-PS server (required parameter)
                  (for example http://umbar.ics.muni.cz:8901)

Other parameters will be configurable in close future. Its
current hard-coded values are in org.glite.jp.index/src/conf.[ch]


Testing 
-------

For testing purposes, several tests are done by shell script
located in test/run-test.sh and is also apcked in in RPM. It
includes following tests:

* Simple query test 
- this test starts testing index server, creates testing DB 
  and polutes it with sample data. Then simple query is given
  to server, answer is checked with supposed return output and
  cleanup is done.
- the query is in file test/simple_query.in and has followhing 
  form: (status=Ready)

* Complex query test
- behaves as previous test, but query is more complicated.
- the query is in file test/complex_query.in and has followhing 
  form: (status=Done OR status=READY) AND (user!=God)

* Feed & query test
- this test starts testing index server, feeds index server by
  mimicing bahaviour of primary storage server by sending data 
  via soap call, than asks IS using some complex query, checks
  the responce and does cleanup. 
- detailed info:
	1) it simulates response from primary storage, making appropriate
	   changes in database. (inserts feedid).

	2) it calls updateJobs wsdl call, normally invoked by JP-PS, and
	   send some data to JP-IS which stores them im database.

	3) it calls queryJobs wsdl call, normally called by user program,
	   obtaining previously inserted data.

	Test query has form (status=Done OR status=Ready) AND (user!=God).

The testing shell script is highly configurable via environmental varibles.
Please, run the script (run-test.sh) with '-?' option to get list of all 
variables and their meaning, if you are not satisfied with default setting.
